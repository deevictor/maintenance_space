import os, traceback, sys 
class DataCollector:
	"""Generates the list of servers with Free space on Disk D < space_less_then parameter"""
	def __init__(self, source_file, space_less_then):
		self.source=source_file
		self.space=space_less_then
		self.data={}

	def collect_data(self):
		f_obj=open(self.source)
		lines=f_obj.readlines()
		lines = [line.strip() for line in lines if line.find('#') == -1 and line.find('TYPE') == -1]
		# print(lines)
		try:
			for line in lines:
				if line:
					line=[item.strip('"') for item in line.split("|")]
					if line[1] == 'D:' and int(line[3]) < self.space :
						# print(line)
						self.data[line[0]] = line[3]
		except:
			traceback.print_exc()
			pass
		else:
			print("the data is collected successfully.")


	def get_data(self):
		return self.data
##############################################################
class CS_File:
	"""this class locates the latest csv_filepath in provided folder"""
	def __init__(self, folder):
		self.folder=folder
		self.cs_filepath=self.locate_file()

	def locate_file(self):
		list_files=os.listdir(self.folder)
		list_files.sort()
		cs_filepath=self.folder+'/'+list_files[-1]
		return cs_filepath

	def get_filepath(self):
		print(self.cs_filepath+' file is used for analysis.')
		return self.cs_filepath
###########################################################################################
class Servers:
	"""creates the list of servers with space less then in provided parameter and dumps it in the file"""
	def __init__(self, servers_dict, servers_file_path):
		self.servers=servers_dict
		self.servers_file_path=servers_file_path

	def generate_list(self):
		with open(self.servers_file_path, 'w') as file_object:
			for server, free_space in self.servers.items():
				file_object.write(server+'\n')
				print(server+' is added to '+self.servers_file_path+' file, free space: '+free_space)
			print('servers.txt file is created.')



###########################################################################################
class Servers_To_Clean:
	"""Generates the list of the servers for space cleaning out of the list generated by spacechecker"""

	def __init__(self, source_f, target_f, free_space):
		self.source=source_f
		self.target=target_f
		self.space=free_space

	def generate_list(self):
		"""generates the file with the servers to clean, less then arg.space_less_then of free space"""
		with open(self.source) as file_object:
			lines=file_object.readlines()

		servers=[server.strip() for server in lines if server.find("D:") != -1]
		servers1=[server.split()[0] for server in servers if float((server.split()[3]).replace(',','.'))<self.space]

		with open(self.target, 'w') as file_object1:
			if not servers1:
				print('all servers have free space >= '+str(self.space)+' gigabytes.')
			else:
				for server in servers1:
					file_object1.write(server+'\n')
					print(server+' is added to servers_toclean.txt file')
				print('All servers with free space less then '+str(self.space)+' gigabytes are added to '+self.target)
###########################################################################################
class F_style:
	red='\033[91m'
	underline = '\033[4m'
	bold = '\033[0m'
###########################################################################################